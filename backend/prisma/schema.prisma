generator client { 
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum MatchStatus {
  SCHEDULED
  ONGOING
  FINISHED
}

enum Role {
  PLAYER
  MANAGER
}

model User {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  dob              DateTime
  favoriteFoot     String
  favoritePosition Position
  phoneNumber      String   @unique
  email            String   @unique
  passwordHash     String
  role             Role     @default(PLAYER)
  createdAt        DateTime @default(now())

  // Relations
  players Player[]
  groups  Group[] @relation("UserGroups")
}

model Player {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  position  Position
  rating    Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  availability Availability[]
  matches      PlayerMatch[]
  ratings      Rating[]
  teams        Team[]       @relation("PlayerTeams")

  // Relation to User (many players per user)
  userId Int?
  user   User? @relation(fields: [userId], references: [id])
}

model Match {
  id        Int           @id @default(autoincrement())
  date      DateTime
  location  String
  duration  Int
  fee       Float
  createdBy Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  capacity  Int           @default(10)

  status    MatchStatus   @default(SCHEDULED)
  homeScore Int?
  awayScore Int?

  players   PlayerMatch[]
  teams     Team[]
  ratings   Rating[]
}

model PlayerMatch {
  id       Int    @id @default(autoincrement())
  playerId Int
  matchId  Int
  team     String

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@unique([playerId, matchId]) // prevent duplicate participation
}

model Availability {
  id          Int      @id @default(autoincrement())
  playerId    Int
  matchDate   DateTime
  isAvailable Boolean  @default(true)

  player Player @relation(fields: [playerId], references: [id])
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  users User[] @relation("UserGroups")
}

model Team {
  id        Int      @id @default(autoincrement())
  matchId   Int
  playerId  Int
  teamName  String
  createdAt DateTime @default(now())

  // Relations
  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation("PlayerTeams", fields: [playerId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  playerId  Int
  matchId   Int
  score     Float
  comment   String?
  createdAt DateTime @default(now())

  player Player @relation(fields: [playerId], references: [id])
  match  Match  @relation(fields: [matchId], references: [id])

  @@unique([playerId, matchId]) // a player can only rate an opponent once per match
}

