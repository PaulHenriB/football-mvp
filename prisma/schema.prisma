generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  dob             DateTime
  favoriteFoot    String
  favoritePosition String
  phoneNumber     String?   @unique
  email           String    @unique
  passwordHash    String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdMatches  Match[]   @relation("MatchCreator")
}

model Player {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  position     Position
  rating       Float          @default(0.0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  availability Availability[]
  matches      PlayerMatch[]
  user         User?          @relation(fields: [userId], references: [id])
  userId       Int?
}

model Match {
  id        Int           @id @default(autoincrement())
  date      DateTime
  location  String
  duration  Int
  fee       Float
  createdBy Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  players   PlayerMatch[]
  teams     Team[]
}


model PlayerMatch {
  id          Int     @id @default(autoincrement())
  playerId    Int
  matchId     Int
  team        String
  ratingGiven Float?
  match       Match   @relation(fields: [matchId], references: [id])
  player      Player  @relation(fields: [playerId], references: [id])
}

model Availability {
  id          Int      @id @default(autoincrement())
  playerId    Int
  matchDate   DateTime
  isAvailable Boolean  @default(true)
  player      Player   @relation(fields: [playerId], references: [id])
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  users     User[]
}

model Team {
  id        Int       @id @default(autoincrement())
  matchId   Int
  playerId  Int
  teamName  String
  createdAt DateTime  @default(now())
  match     Match     @relation(fields: [matchId], references: [id])
  player    Player    @relation(fields: [playerId], references: [id])
}

model Rating {
  id        Int       @id @default(autoincrement())
  playerId  Int
  matchId   Int
  score     Float
  comment   String?
  createdAt DateTime  @default(now())
  player    Player    @relation(fields: [playerId], references: [id])
  match     Match     @relation(fields: [matchId], references: [id])
}
